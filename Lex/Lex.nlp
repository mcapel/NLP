-- Basic English Lexicon

John :: n :: *JOHN*
Mary :: n :: *MARY*
--someone :: s/(n\s) :: \1.[Ex \3.(1 3)]
someone :: ((n\s)/n)\((s/(n\s))\s) :: \1.\2.[Ex \3.((2 1) 3)]
--someone :: ((s/(n\s))*((n\s)/n))\s :: \1.[Ex \2.(p1(1) (p2(1) 2))]
everyone :: s/(n\s) :: \1.[All \3.(1 3)]
--everyone :: ((n\s)/n)\((s/(n\s))\s) :: \1.\2.[All \3.((2 1) 3)]
--everyone :: ((s/(n\s))*((n\s)/n))\s :: \1.[All \2.(p1(1) (p2(1) 2))]
a :: (s/(n\s))/c :: \1.\2.[Ex \3.[(1 3) & (2 3)]]
a :: (((n\s)/n)\((s/(n\s))\s))/c :: \1.\2.\3.[Ex \4.[(1 4) & (3 (2 4))]]
a :: (((s/(n\s))*((n\s)/n))\s)/c :: \1.\2.[Ex \3.[(1 3) & (p1(2) (p2(2) 3))]]
every :: (s/(n\s))/c :: \1.\2.[All \3.[(1 3) & (2 3)]]
every :: (((n\s)/n)\((s/(n\s))\s))/c :: \1.\2.\3.[All \4.[(1 4) => (3 (2 4))]]
every :: (((s/(n\s))*((n\s)/n))\s)/c :: \1.\2.[All \3.[(1 3) => (p1(2) (p2(2) 3))]]
walks :: n\s :: \1.(*WALK* 1)
leave :: b :: *LEAVE*
to :: i/b :: \1.1
that :: s/s :: \1.1
loves :: (n\s)/n :: \1.\2.((*LOVE* 1) 2)
wants :: (n\s)/i :: \1.\2.((*WANT* (1 2)) 2)
wants :: (n\s)/((s/(n\s))*i) :: \1.\2.(p1(1) \3.((*WANT* (p2(1) 3)) 2))
missing :: c/c :: \1.(*MISSING* 1)
happy :: c/c :: \1.(*HAPPY* 1)
seems :: (n\s)/i :: \1.\2.(*SEEM* (1 2))
seems :: (n\s)/((s/s)*s) :: \1.\2.(*SEEM* (p1(1) p2(1)))
promised :: (n\s)/i :: \1.\2.((*PROMISE* (1 2)) 2)
promised :: (n\s)/((s/(n\s))*i) :: \1.\2.(p1(1) \3.(((*PROMISE* (p2(1) 2)) 3) 2))
persuaded :: (n\s)/((s/(n\s))*i) :: \1.\2.(p1(1) \3.(((*PERSUADE* (p2(1) 3)) 3) 2))
be :: b/(c/c) :: *BE*
is :: ((s/(n\s))\s)/(c/c) :: \1.\2.((*BE* 1) 2)
is :: (n\s)/n :: *SAME*
she :: s/(n\s) :: \0.(0 1)
he :: s/(n\s) :: \1.(1 2)
it :: s/(n\s) :: \2.(2 3)
woman :: c :: *WOMAN*
book :: c :: *BOOK*
himself :: ((n\s)/n)\(n\s) :: \1.\2.((1 2) 2)

--% John -> s/(n\s)
--% John loves Mary -> s
--% John is missing -> s
--% someone is missing -> s
--% John is missing -> (s/(n\s))*(n\s)
% everyone loves someone -> s
--% everyone seems to leave -> s
--% it seems that everyone walks -> s
--% John persuaded someone to leave -> s
--% John promised someone to leave -> s